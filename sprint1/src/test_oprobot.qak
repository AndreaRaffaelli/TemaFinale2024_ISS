System testoprobot

Dispatch robotStart: robotStart(X)
Dispatch robotUpdate: robotUpdate(X)
Dispatch startBurn : startBurn(X)
Request engage        : engage(CALLER)
Reply   engagedone    : engagedone(ARG)
Reply   engagerefused : engagerefused(ARG)
Request  doplan   : doplan( PATH, STEPTIME )
Reply doplandone  : doplandone( ARG )
Reply doplanfailed  : doplanfailed( ARG )
Event burnEnd : burnEnd( ARG )

//Inglobamento endosimbitico di robotpos
Request moverobot    :  moverobot(TARGETX, TARGETY)  
Reply moverobotdone  :  moverobotok(ARG)                    for moverobot
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO) for moverobot


Context ctxtest ip [host="localhost" port=6969]
Context ctxbasicrobot ip [host="127.0.0.1"  port=8020]

ExternalQActor basicrobot context ctxbasicrobot

QActor oprobot context ctxtest{   
[# 	
	var RobotState = "IDLE";
	var MentalState = "HOME";
	val Waste_x = 0; //waste
	val Waste_y = 5;		
	val In_x = 3; //burnin
	val In_y = 2;
	val Ho_x = 0; //home
	val Ho_y = 0;
	val Bo_x = 4; //burnout
	val Bo_y = 5;
	val Ao_x = 7; //AshOut
	val Ao_y = 7;
#]
	State initialize initial{
		println("$name | $MyName engaging ... ") color yellow 
		request basicrobot -m engage : engage($MyName,330)
	}
	Transition t0 whenReply engagedone   -> home				// 	TODO
 	              whenReply engagerefused -> end					//Fallimento Grave

 	State home{
		[# MentalState="HOME"#]
		println("($name): $MentalState") color magenta 
		updateResource [#  "info($MentalState)" #]
		onMsg( engagedone : engagedone(X) ){			
			forward wis -m robotUpdate : robotUpdate(idle)
		}
	}

 	Transition t0
//		whenMsg robotStart -> goToWasteIn
		whenTime 1000 -> goToWasteIn
		whenEvent burnEnd -> home_go
 	
	State goToWasteIn{
		println("($name): start") color magenta 
		request basicrobot -m moverobot : moverobot(Waste_x,Waste_y) //posizione WastePort
	}
	Transition t1
		whenReply moverobotdone -> loadRP
		whenReply moverobotfailed -> end //errore grave?? mossa fallita
	
	State loadRP{
		[# MentalState="WASTEIN"#]
		println("($name): $MentalState") color magenta 
		updateResource [#  "info($MentalState)" #]
		request basicrobot -m moverobot : moverobot(In_x,In_y) //posizione BurnIn
	}
	Transition t2
		whenReply moverobotdone -> startBurn
		whenReply moverobotfailed -> end //errore grave?? mossa fallita
	
	State startBurn{
		[# MentalState="BURNIN"#]
		println("($name): $MentalState") color magenta 
		updateResource [#  "info($MentalState)" #]
		forward incinerator -m startBurn: startBurn(1)
		request basicrobot -m moverobot : moverobot(Ho_x,Ho_y) //posizione BurnIn
	}
	Transition t3 
			whenReply moverobotdone -> home
			whenReply moverobotfailed -> end //errore grave?? mossa fallita
	
	State home_go {
		request basicrobot -m moverobot : moverobot(Bo_x,Bo_y) //posizione BurnOut	
	}
	Transition t4			
			whenReply moverobotdone -> gatheringAsh
			whenReply moverobotfailed -> end //errore grave?? mossa fallita

	State gatheringAsh{
		[# MentalState="BURNOUT"#]
		println("($name): $MentalState") color magenta 
		updateResource [#  "info($MentalState)" #]
		request basicrobot -m moverobot : moverobot(Ao_x,Ao_y) //posizione ASHOUT
	}
	Transition t5 			
			whenReply moverobotdone -> unload
			whenReply moverobotfailed -> end //errore grave?? mossa fallita
	
	State unload{
		[# MentalState="ASHOUT"#]
		println("($name): $MentalState") color magenta 
		updateResource [#  "info($MentalState)" #]
		request basicrobot -m moverobot : moverobot(Ho_x,Ho_y) //posizione home
		forward wis -m robotUpdate : robotUpdate(idle) 
	}
	Transition t6		
			whenReply moverobotdone -> home
			whenReply moverobotfailed -> end //errore grave?? mossa fallita	
	
	//BasicRobot non disponibile, fallimento grave
	State end {
		[#System.exit(-1)#]
	}
}


//Solo a scopo di test
QActor wis context ctxtest{
	State s0 initial{
		
	}
}

QActor incinerator context ctxtest{
	State s0 initial{
		
	}
	Transition t0 whenMsg startBurn -> endBurn
	State endBurn {
		delay 500
		emit burnEnd: burnEnd
	}
	
}


/* Per il test
 * Process.exec()
 * Process.waitFor()
 * Process.exitValue()
 */

