System sprintuno
 
 
Dispatch robotStart: robotStart(X)

Dispatch robotUpdate: robotUpdate(X)
Dispatch startBurn : startBurn(X)
Dispatch info : info(X, Y, Z)
Request engage        : engage(CALLER)
Reply   engagedone    : engagedone(ARG)
Reply   engagerefused : engagerefused(ARG)
Request  doplan   : doplan( PATH, STEPTIME )
Reply doplandone  : doplandone( ARG )
Reply doplanfailed  : doplanfailed( ARG )
Event burnEnd : burnEnd( ARG )

Event startIncinerator: startIncinerator(X)


//Inglobamento endosimbitico di robotpos
Request moverobot    :  moverobot(TARGETX, TARGETY)  
Reply moverobotdone  :  moverobotok(ARG)                    for moverobot
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO) for moverobot

Request testStart : testStart(X)
Request testRequest : testRequest(X)
Reply testReply : testReply(X ,Y)

Context ctxtest ip [host="localhost" port=6969]
Context ctxbasicrobot ip [host="127.0.0.1"  port=8020]

ExternalQActor basicrobot context ctxbasicrobot


QActor wis context ctxtest{ 
	[#//
		var Ws_status = 0;
        var As_status = 0;

		var RobotFree = true;
		var DLIMIT = 3;		// zero non corretto
	#]
	State s0 initial{
		printCurrentMessage color yellow
		delay 1000
		emit startIncinerator : startIncinerator( stop )
		observeResource oprobot msgid info
		//updateResource [# "info($name,RobotFree,$RobotFree)" #]			Update di test per l'observer_tests
		
	}
	Goto idle
	
	State idle {
		printCurrentMessage color yellow
	}
	Transition t0			
		whenMsg info -> controllo		
		//whenEvent burnEnd -> burnEndHandler		// inc segnala fine combustione (inutile)
	
	State controllo {
       	printCurrentMessage color yellow
		onMsg( info :  info(N,VAL, VAR) ){
			[# val N = payloadArg(0)  #]
			[# val VAR = payloadArg(1)#]
		    [# val VAL = payloadArg(2)#]
			[# var RobotState = ""   #]
			println("$name views $N $VAR $VAL") color magenta
			[#
			if(N.equals("oprobot") && VAR.equals("RobotState")){
				RobotState = VAL;
				if(RobotState.equals("IDLE")){
					RobotFree = true;
				}
				else{
					RobotFree = false;
				}
			}
			#]
		}
	
		[#
        if( RobotFree === true){
            //chiedi Ws_status
            Ws_status = (0..5).random()            
            //chiedi As_status
            As_status = (0..5).random()
    	}
		println("($name) Ws_status: ($Ws_status) , As_status: ($As_status)")

        if(Ws_status>0 && As_status< DLIMIT && RobotFree === true){
        #]
        	println("($name) invio messaggio start") color magenta
        	println("($name) controllo: condizioni corrette e start") color magenta
        	forward oprobot -m robotStart : robotStart( parti )
        	[#
        	RobotFree=false;
        	#]
			updateResource [# "info($name,RobotFree,$RobotFree)" #]
            updateResource [# "info($name,Ws_status,$Ws_status)" #]
            updateResource [# "info($name,As_status,$As_status)" #]
        [#
        }
        #]
        
        
	}   
    Goto idle if [# RobotFree === false#] else polling

    State polling{}
    Transition t1 
        whenTime 2000 -> controllo
        
        //whenEvent burnEnd -> burnEndHandler		// inc segnala fine combustione (inutile)
	
	//State burnEndHandler{
	//	println("($name): ricevuto segnale di fine combustione dall'inc") color blue 
	//}
	//Goto idle

}






QActor oprobot context ctxtest{   
[# 	
	var RobotState = "IDLE";
	var MentalState = "";
	val Waste_x = 0; //waste
	val Waste_y = 4;		
	val In_x = 3; //burnin
	val In_y = 1;
	val Ho_x = 0; //home
	val Ho_y = 0;
	val Bo_x = 4; //burnout
	val Bo_y = 3;
	val Ao_x = 6; //AshOut
	val Ao_y = 4;
#]
	State initialize initial{
		printCurrentMessage color yellow
		//delay 500
		println("$name | $MyName engaging ... ") color magenta 
		request basicrobot -m engage : engage($MyName,330)
	}
	Transition t0 whenReply engagedone   -> home				
 	              whenReply engagerefused -> end					//Fallimento Grave

 	State home{
 		printCurrentMessage color yellow
		[# MentalState="HOME"#]
		//println("($name): $MentalState") color magenta 
		updateResource [#  "info($name,MentalState,$MentalState)" #]
		onMsg( engagedone : engagedone(X) ){			
//			forward wis -m robotUpdate : robotUpdate(idle)
			updateResource [#  "info($name,RobotState,$RobotState)" #]
		}
	}   
 	Transition t0
		whenMsg robotStart -> goToWasteIn
		whenEvent burnEnd -> home_go
 	
	State goToWasteIn{
		printCurrentMessage color yellow
		[# RobotState="WORKING"#]
		updateResource [#  "info($name,RobotState,$RobotState)" #]
		//println("($name): start") color magenta 
		request basicrobot -m moverobot : moverobot($Waste_x,$Waste_y) //posizione WastePort
	}
	Transition t1
		whenReply moverobotdone -> loadRP
		whenReply moverobotfailed -> end //errore grave?? mossa fallita
	
	State loadRP{
		printCurrentMessage color yellow
		[# MentalState="WASTEIN"#]
		//println("($name): $MentalState") color magenta 
		updateResource [#  "info($name,MentalState,$MentalState)" #]
		request basicrobot -m moverobot : moverobot($In_x,$In_y) //posizione BurnIn
	}
	Transition t2
		whenReply moverobotdone -> startBurn
		whenReply moverobotfailed -> end //errore grave?? mossa fallita
	
	State startBurn{
		printCurrentMessage color yellow
		[# MentalState="BURNIN"#]
		//println("($name): $MentalState") color magenta 
		updateResource [#  "info($name,MentalState,$MentalState)" #]
		delay 5000
		forward incinerator -m startBurn: startBurn(1)
		request basicrobot -m moverobot : moverobot($Ho_x,$Ho_y) //posizione BurnIn
	}
	Transition t3 
			whenReply moverobotdone -> home
			whenReply moverobotfailed -> end //errore grave?? mossa fallita
	
	State home_go {
		printCurrentMessage color yellow
		request basicrobot -m moverobot : moverobot($Bo_x,$Bo_y) //posizione BurnOut	
	}
	Transition t4			
			whenReply moverobotdone -> gatheringAsh
			whenReply moverobotfailed -> end //errore grave?? mossa fallita

	State gatheringAsh{
		printCurrentMessage color yellow
		[# MentalState="BURNOUT"#]
		//println("($name): $MentalState") color magenta 
		updateResource [#  "info($name,MentalState,$MentalState)" #]
		delay 1000
		request basicrobot -m moverobot : moverobot($Ao_x,$Ao_y) //posizione ASHOUT
	}
	Transition t5 			
			whenReply moverobotdone -> unload
			whenReply moverobotfailed -> end //errore grave?? mossa fallita
	
	State unload{
		printCurrentMessage color yellow
		[# MentalState="ASHOUT"#]
		[# RobotState="IDLE"#]
		updateResource [#  "info($name,RobotState,$RobotState)" #]
		//println("($name): $MentalState") color magenta 
		updateResource [#  "info($name,MentalState,$MentalState)" #]
		request basicrobot -m moverobot : moverobot($Ho_x,$Ho_y) //posizione home
		//forward wis -m robotUpdate : robotUpdate(idle) 
	}
	Transition t6		
			whenReply moverobotdone -> home
			whenReply moverobotfailed -> end //errore grave?? mossa fallita	
	
	//BasicRobot non disponibile, fallimento grave
	State end {
		printCurrentMessage color red
		[#System.exit(-1)#]
	}
}

QActor incinerator context ctxtest{ 
	[#
        val BTIME = 3000L;
        var start = "off";
	#]
	State s0 initial{
		printCurrentMessage color yellow
		//delay 500
	}	
	Transition t0
		whenEvent startIncinerator -> start
		
	State start{
		printCurrentMessage color yellow
		println("($name): Inizio inceneritore") color magenta
		[# start ="on"; #]
		updateResource [# "info($name,start,$start)" #]
	}
	Transition t1
		whenMsg startBurn -> handleBurnStart
		
	State handleBurnStart{
		printCurrentMessage color yellow
		println("($name): Inizio bruciatura") color magenta
		delay 5000
		println("($name): Fine bruciatura") color magenta
		emit burnEnd : burnEnd( stop )
		//replyTo startBurn with testReply : testReply(burnEnd)			Reply a soli fini di test
	}
	Transition t2
		whenMsg startBurn -> handleBurnStart	
}










