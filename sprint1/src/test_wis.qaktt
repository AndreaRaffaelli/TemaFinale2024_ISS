System testwis

Dispatch robotStart: robotStart(X)
Dispatch robotUpdate: robotUpdate(X)

Event burnEnd : burnEnd( ARG )

Dispatch info : info(N,VAR,VAL)

Request testRequest : testRequest(X)
Reply testReply : testReply(X,Y,Z)

Context ctxtest ip [host="localhost" port=6969]
//Context ctxoprobot ip [host="localhost" port=8080]

QActor wis context ctxtest{ 
	[#//
		var Ws_status = 0;
        var As_status = 0;

		var RobotFree = true;
		var DLIMIT = 3;		// zero non corretto
	#]
	State s0 initial{
		delay 1000
		observeResource oprobot msgid info
		updateResource [# "info($name,RobotFree,$RobotFree)" #]
		printCurrentMessage color blue 
	}
	Goto idle
	
	State idle {
		
		println("($name) idle") color blue	
	}
	Transition t0			
		whenMsg info -> controllo		
		//whenEvent burnEnd -> burnEndHandler		// inc segnala fine combustione (inutile)
	
	State controllo {
       	printCurrentMessage color yellow
		onMsg( info :  info(N,VAL, VAR) ){
			[# val N = payloadArg(0)  #]
			[# val VAR = payloadArg(1)#]
		    [# val VAL = payloadArg(2)#]
			[# var RobotState = ""   #]
			println("$name views $N $VAR $VAL") color magenta
			[#
			if(N.equals("oprobot") && VAR.equals("RobotState")){
				RobotState = VAL;
				if(RobotState.equals("IDLE")){
					RobotFree = true;
				}
				else{
					RobotFree = false;
				}
			}
			#]
		}
	
		[#
        if( RobotFree === true){
            //chiedi Ws_status
            Ws_status = (0..5).random()            
            //chiedi As_status
            As_status = (0..5).random()
    	}
		println("($name) Ws_status: ($Ws_status) , As_status: ($As_status)")

        if(Ws_status>0 && As_status< DLIMIT && RobotFree === true){
        #]
        	println("($name) invio messaggio start") color blue
        	println("($name) controllo: condizioni corrette e start") color blue
        	forward oprobot -m robotStart : robotStart( parti )
        	[#
        	RobotFree=false;
        	#]
			updateResource [# "info($name,RobotFree,$RobotFree)" #]
            updateResource [# "info($name,Ws_status,$Ws_status)" #]
            updateResource [# "info($name,As_status,$As_status)" #]
        [#
        }
        #]
        
        
	}   
    Goto idle if [# RobotFree === false#] else polling

    State polling{}
    Transition t1 
        whenTime 2000 -> controllo
        
        //whenEvent burnEnd -> burnEndHandler		// inc segnala fine combustione (inutile)
	
	//State burnEndHandler{
	//	println("($name): ricevuto segnale di fine combustione dall'inc") color blue 
	//}
	//Goto idle

}

QActor test_observer context ctxtest{ 
	 	[# var N = ""; var VAL = ""; var VAR = ""  ; var RobotFree = "";var As_status="" ; var Ws_status=""#]
	
		State s0 initial{
			printCurrentMessage color blue
			delay 500
			observeResource wis msgid info
//			forward wis -m robotUpdate : robotUpdate( RobotFree )
		}
		Transition t0
			whenMsg info -> s1
			
		State s1{
			onMsg( info :  info(N,VAL, VAR) ){
    		[# N = payloadArg(0) #]
			[# VAR = payloadArg(1)#]
    	    [# VAL = payloadArg(2)#]
    		
    		println("$name views $N $VAR $VAL") color magenta
    		[#if(VAR.equals("RobotFree")){
    				RobotFree=VAL;
    			} else if(VAR.equals("As_status")){
    				As_status=VAL;
    			} else{
  					Ws_status=VAL;
    			}
    		#]
    		//[#var RESULT = "$RobotFree,$As_status,$Ws_status"#]
			//println("$name print result: $RESULT") color yellow
 		}
 		
 		}
		Transition t1
			whenMsg info -> s1
			whenRequest testRequest -> s2  
			
		State s2{
			[#var RESULT = "$RobotFree,$As_status,$Ws_status"#]
			println("$name print result: $RESULT") color yellow
			//[#System.out.println("$RESULT");				 #]
			replyTo testRequest with testReply : testReply($RESULT)
			printCurrentMessage
		}
		Transition t1
			whenMsg info -> s1
			whenRequest testRequest -> s2  
}



QActor oprobot context ctxtest{
	State s0 initial{
		delay 5000
		printCurrentMessage color yellow
		[# val RobotState="IDLE"#] 
		updateResource [#  "info($name,RobotState,$RobotState)" #]
	}
} 
