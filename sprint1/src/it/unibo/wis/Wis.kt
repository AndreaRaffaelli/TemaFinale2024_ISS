/* Generated by AN DISI Unibo */ 
package it.unibo.wis

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wis ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var ws_status = 0;
				var as_status = 0;
				var inc_status= false;
				var robotWait = true;
				var DLIMIT =0;		// zero non corretto
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("idle") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="robotHandler",cond=whenDispatch("robotUpdate"))
					transition(edgeName="t01",targetState="burnEndHandler",cond=whenEvent("burnEnd"))
				}	 
				state("robotHandler") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("robotUpdate(X)"), Term.createTerm("robotUpdate(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
											var pl = payloadArg(0)
											if(pl.equals("robotWait")){
												robotWait=true;
											}
								CommUtils.outblue("($name) robotUpdate: $pl")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="controllo", cond=doswitch() )
				}	 
				state("controllo") { //this:State
					action { //it:State
						
									if(ws_status>0 && as_status< DLIMIT && inc_status === false && robotWait === true){
						forward("robotStart", "robotStart(parti)" ,"oprobot" ) 
						CommUtils.outblack("($name) controllo: condizioni corrette")
						
										robotWait=false;
									} 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("burnEndHandler") { //this:State
					action { //it:State
						CommUtils.outblue("($name): ricevuto segnale di fine combustione dall'inc")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
