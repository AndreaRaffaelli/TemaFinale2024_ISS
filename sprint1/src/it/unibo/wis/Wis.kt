/* Generated by AN DISI Unibo */ 
package it.unibo.wis

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wis ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//
				var Ws_status = 0;
				var As_status = "empty";
				var RobotFree = false;
				var DLIMIT = 3; // zero non corretto
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						delay(1000) 
						emit("startIncinerator", "startIncinerator(avvio)" ) 
						observeResource("localhost","8022","ctxservicearea","oprobot","info")
						updateResourceRep( "info($name,Ws_status,$Ws_status)"  
						)
						delay(200) 
						updateResourceRep( "info($name,RobotFree,$RobotFree)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="controllo", cond=doswitch() )
				}	 
				state("controllo") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("info(X,Y,Z)"), Term.createTerm("info(SRC,VAL,VAR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
											val SRC = payloadArg(0)
											val VAR = payloadArg(1)
											val VAL = payloadArg(2)
								CommUtils.outyellow("$name views $SRC $VAR $VAL")
								 
											if (SRC.equals("oprobot") && VAR.equals("RobotState")) {
												RobotFree = VAL.equals("IDLE");
											}
								 
											if (SRC.equals("oprobot") && VAR.equals("MentalState") && VAL.equals("WASTEIN")) {			
												Ws_status -= 1
								updateResourceRep( "info($name,Ws_status,$Ws_status)"  
								)
								
											} else{
								updateResourceRep( "info($name,$VAR,$VAL)"  
								)
								
											}
								CommUtils.outblack("($name) Ws_status: ($Ws_status), As_status: ($As_status), RobotFree: ($RobotFree)")
						}
						
								// Se tutte le condizioni sono soddisfatte, avvia il robot
								if (Ws_status > 0 && !As_status.equals("full") && RobotFree) {
						CommUtils.outyellow("($name) invio messaggio start oprobot")
						CommUtils.outyellow("($name) controllo: condizioni corrette e start")
						forward("robotStart", "robotStart(parti)" ,"oprobot" ) 
						
									RobotFree = false;
						
								}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="sonarUpdate",cond=whenDispatch("sonarUpdate"))
					transition(edgeName="t01",targetState="controllo",cond=whenDispatch("info"))
					transition(edgeName="t02",targetState="newRp",cond=whenRequest("addrp"))
				}	 
				state("newRp") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("addrp(X)"), Term.createTerm("addrp(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Ws_status += 1
								answer("addrp", "replyAddrp", "info(wis,Ws_status,$Ws_status)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="controllo", cond=doswitch() )
				}	 
				state("sonarUpdate") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("sonarUpdate(QTY)"), Term.createTerm("sonarUpdate(QTY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
											As_status = payloadArg(0)
								updateResourceRep( "info($name,As_status,$As_status)"  
								)
						}
						CommUtils.outyellow("($name) sonarUpdate: ricevuto: $As_status")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="controllo", cond=doswitch() )
				}	 
			}
		}
} 
