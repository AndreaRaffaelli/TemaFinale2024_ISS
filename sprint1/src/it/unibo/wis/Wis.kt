/* Generated by AN DISI Unibo */ 
package it.unibo.wis

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wis ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//
				var Ws_status = 0;
		        var As_status = 0;
		
				var RobotFree = true;
				var DLIMIT = 3;		// zero non corretto
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						delay(1000) 
						emit("startIncinerator", "startIncinerator(stop)" ) 
						observeResource("localhost","6969","ctxtest","oprobot","info")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						updateResourceRep( "info($name,RobotFree,$RobotFree)"  
						)
						updateResourceRep( "info($name,Ws_status,$Ws_status)"  
						)
						updateResourceRep( "info($name,As_status,$As_status)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="controllo",cond=whenDispatch("info"))
				}	 
				state("controllo") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("info(X,Y,Z)"), Term.createTerm("info(N,VAL,VAR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val N = payloadArg(0)   
								 val VAR = payloadArg(1) 
								 val VAL = payloadArg(2) 
								 var RobotState = ""    
								CommUtils.outmagenta("$name views $N $VAR $VAL")
								
											if(N.equals("oprobot") && VAR.equals("RobotState")){
												RobotState = VAL;
												if(RobotState.equals("IDLE")){
													RobotFree = true;
												}
												else{
													RobotFree = false;
												}
											}
						}
						
						        if( RobotFree === true){
						            //chiedi Ws_status
						            Ws_status = (0..5).random()            
						            //chiedi As_status
						            As_status = (0..5).random()
						    	}
								println("($name) Ws_status: ($Ws_status) , As_status: ($As_status)")
						
						        if(Ws_status>0 && As_status< DLIMIT && RobotFree === true){
						CommUtils.outmagenta("($name) invio messaggio start")
						CommUtils.outmagenta("($name) controllo: condizioni corrette e start")
						forward("robotStart", "robotStart(parti)" ,"oprobot" ) 
						
						        	RobotFree=false;
						updateResourceRep( "info($name,RobotFree,$RobotFree)"  
						)
						updateResourceRep( "info($name,Ws_status,$Ws_status)"  
						)
						updateResourceRep( "info($name,As_status,$As_status)"  
						)
						
						        }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitchGuarded({ RobotFree === false 
					}) )
					transition( edgeName="goto",targetState="polling", cond=doswitchGuarded({! ( RobotFree === false 
					) }) )
				}	 
				state("polling") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_polling", 
				 	 					  scope, context!!, "local_tout_"+name+"_polling", 2000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t11",targetState="controllo",cond=whenTimeout("local_tout_"+name+"_polling"))   
				}	 
			}
		}
} 
