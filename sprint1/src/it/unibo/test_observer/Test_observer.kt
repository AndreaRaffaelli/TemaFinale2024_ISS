/* Generated by AN DISI Unibo */ 
package it.unibo.test_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Test_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var MentalState=""; var RobotState=""; var N = ""; var VAL = ""; var VAR = ""; 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						observeResource("localhost","6969","ctxtest","oprobot","info")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="handleInfo",cond=whenDispatch("info"))
				}	 
				state("handleInfo") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("info(X,Y,Z)"), Term.createTerm("info(N,VAL,VAR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 N = payloadArg(0)  
								 VAR = payloadArg(1) 
								 VAL = payloadArg(2) 
								CommUtils.outmagenta("$name views $N $VAR $VAL")
								if(VAR.equals("RobotState")){
								    				RobotState=VAL;
								    			} else {
								  					MentalState=VAL;
								    			}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t117",targetState="handleInfo",cond=whenDispatch("info"))
					transition(edgeName="t118",targetState="handleStart",cond=whenRequest("testStart"))
					transition(edgeName="t119",targetState="handleRequest",cond=whenRequest("testRequest"))
				}	 
				state("handleStart") { //this:State
					action { //it:State
						var RESULT = "$MentalState,$RobotState" 
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outmagenta("START: $name print result: $RESULT")
						forward("robotStart", "robotStart(parti)" ,"oprobot" ) 
						answer("testStart", "testReply", "testReply($RESULT)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t220",targetState="handleInfo",cond=whenDispatch("info"))
					transition(edgeName="t221",targetState="handleRequest",cond=whenRequest("testRequest"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						var RESULT = "$MentalState,$RobotState" 
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outmagenta("$name print result: $RESULT")
						answer("testRequest", "testReply", "testReply($RESULT)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t222",targetState="handleInfo",cond=whenDispatch("info"))
					transition(edgeName="t223",targetState="handleRequest",cond=whenRequest("testRequest"))
				}	 
			}
		}
} 
