/* Generated by AN DISI Unibo */ 
package it.unibo.monitoring_device

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import main.resources.LedFactory

class Monitoring_device ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val led = LedFactory.create("fisico","localhost","8021")
		var statusInc = "off"
			  var statusAsh = "empty" 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						delay(1000) 
						observeResource("localhost","8021","ctxashstorage","datacleaner","info")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="update",cond=whenDispatch("info"))
					transition(edgeName="t01",targetState="handleStartBurn",cond=whenEvent("startBurn"))
					transition(edgeName="t02",targetState="handleEndBurn",cond=whenEvent("endBurn"))
				}	 
				state("update") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("info(SRC,VAL,VAR)"), Term.createTerm("info(SRC,VAL,VAR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val SRC = payloadArg(0)   
								 val VAR = payloadArg(1) 
								 val VAL = payloadArg(2) 
								
													if(VAR.equals("ashLevel")&&VAL.equals("full")){
														statusAsh = "full"
														led.turnBlink();
													}
													if(VAR.equals("ashLevel")&&VAL.equals("empty")){
														statusAsh = "empty"	
														led.turnBlink();
													}
													if(VAR.equals("ashLevel")&&VAL.equals("half")){
														statusAsh= "half";
													}
								emit("sonarUpdate", "sonarUpdate($VAL)" ) 
								
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t13",targetState="update",cond=whenDispatch("info"))
					transition(edgeName="t14",targetState="handleStartBurn",cond=whenEvent("startBurn"))
					transition(edgeName="t15",targetState="handleEndBurn",cond=whenEvent("endBurn"))
				}	 
				state("handleStartBurn") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						
									led.turnOn();
									statusInc = "on"
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t16",targetState="update",cond=whenDispatch("info"))
					transition(edgeName="t17",targetState="handleEndBurn",cond=whenEvent("endBurn"))
				}	 
				state("handleEndBurn") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						
									led.turnOff();
									statusInc = "off"
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t18",targetState="update",cond=whenDispatch("info"))
					transition(edgeName="t19",targetState="handleStartBurn",cond=whenEvent("startBurn"))
				}	 
			}
		}
} 
