/* Generated by AN DISI Unibo */ 
package it.unibo.test_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Test_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 	
				var LED_ON = false 
				var LED_OFF = false
				var LED_BLINK = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="monitor",cond=whenDispatch("info"))
					transition(edgeName="t05",targetState="handleTest",cond=whenRequest("testRequest"))
				}	 
				state("monitor") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("info(X,Y,Z)"), Term.createTerm("info(X,Y,Z)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val N 	= payloadArg(0) 
								 val VAR 	= payloadArg(1) 
								 val VAL 	= payloadArg(2) 
								if(  N.equals("virtualLED") && VAR.equals("led")  
								 ){ 	
														var LED_ON = false 
														var LED_OFF = false
														var LED_BLINK = false
								}
								if(  N.equals("virtualLED") && VAR.equals("led") && VAL.equals("on") 
								 ){ LED_ON = true  
								}
								if(  N.equals("virtualLED") && VAR.equals("led") && VAL.equals("off") 
								 ){ LED_OFF = true  
								}
								if(  N.equals("virtualLED") && VAR.equals("led") && VAL.equals("blink") 
								 ){ LED_BLINK = true 
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t16",targetState="monitor",cond=whenDispatch("info"))
					transition(edgeName="t17",targetState="handleTest",cond=whenRequest("testRequest"))
				}	 
				state("handleTest") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 var RES = "$LED_ON, $LED_OFF, $LED_BLINK" 
						answer("testRequest", "testReply", "testReply($RES)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t28",targetState="monitor",cond=whenDispatch("info"))
					transition(edgeName="t29",targetState="handleTest",cond=whenRequest("testRequest"))
				}	 
			}
		}
} 
