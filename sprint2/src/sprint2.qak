System sprintdue

Dispatch info : info(SRC,VAL, VAR)

Event startIncinerator: startIncinerator(X)

Request testStart : testStart(X)
Request testRequest : testRequest(X)
Reply testReply : testReply(X ,Y)
Event sonardata : distance(D)   // Valori grezzi letti dal sonar 
Event sonarUpdate: sonarUpdate(QTY)   // Valori grezzi letti dal sonar 
Event startBurn : startBurn(X)
Event endBurn : endBurn(X)

Context ctxservicearea ip [host="192.168.137.1" port=8022]
Context ctxashstorage ip [host="localhost"  port=8021]								

ExternalQActor wis context ctxservicearea

QActor monitoring_device context ctxashstorage withobj led using "LedFactory.create(\"fisico\",\"localhost\",\"8021\")"{
	import "main.resources.LedFactory"
	[#var statusInc = "off"
	  var statusAsh = "empty"#]
	// Scrivere POJO LED FISICO (con supporto a Raspberry)
	State s0 initial{
		printCurrentMessage color magenta
		delay 1000
		observeResource datacleaner msgid info    
	}
	Transition t0
		whenMsg info -> update
		whenEvent startBurn -> handleStartBurn	
		whenEvent endBurn -> handleEndBurn	
		
	State update{
		printCurrentMessage color magenta
		onMsg(info : info(SRC,VAL, VAR)){
			[# val SRC = payloadArg(0)  #]
			[# val VAR = payloadArg(1)#]
		    [# val VAL = payloadArg(2)#]
		    
		    [#
					if(VAR.equals("ashLevel")&&VAL.equals("full")){
						statusAsh = "full"
						led.turnBlink();
					}
					if(VAR.equals("ashLevel")&&VAL.equals("empty")){
						statusAsh = "empty"	
						led.turnBlink();
					}
					if(VAR.equals("ashLevel")&&VAL.equals("half")){
						statusAsh= "half";
					}
					#]
					emit sonarUpdate : sonarUpdate($VAL)
					[#
		    #]
		}
	}		
	Transition t1
		whenMsg info -> update
		whenEvent startBurn -> handleStartBurn	
		whenEvent endBurn -> handleEndBurn
			
	State handleStartBurn{
		printCurrentMessage color magenta
		[#
			led.turnOn();
			statusInc = "on"
		#]
	}
	Transition t1
		whenMsg info -> update
		whenEvent endBurn -> handleEndBurn	
		
	State handleEndBurn{
		printCurrentMessage color magenta
		[#
			led.turnOff();
			statusInc = "off"
		#]
	}
	Transition t1
		whenMsg info -> update
		whenEvent startBurn -> handleStartBurn	
}

QActor sonardevice context ctxashstorage{
	[# 
	lateinit var reader : java.io.BufferedReader
    lateinit var p : Process	
    var Distance = 0
	#]	
	State s0 initial{
		printCurrentMessage color magenta
		println("$name | sonarstart") color yellow
	 	[#
			p       = Runtime.getRuntime().exec("python ../../sonarMock.py")
			// p       = Runtime.getRuntime().exec("python3 ../../sonar.py")
			reader  = java.io.BufferedReader(  java.io.InputStreamReader(p.getInputStream() ))	

		#]		
	}
	Goto readSonarData
	
	State readSonarData{
	[# 
		var data = reader.readLine()
		if( data != null ){
			try{ 
				val vd = data.toFloat()
				val v  = vd.toInt()
				if( v <= 100 ){	// Controlla questo valore
					Distance = v				
				}else Distance = 0
			}catch(e: Exception){
					CommUtils.outred("$name readSonarDataERROR: $e "   )
			}
		}	
	#]	
		if [# Distance > 0 #] { 
		    println("$name with python: data = $data"   ) color red
			emitlocalstream sonardata : distance($Distance)			 
		}
		//autodispatch doread : doread(1)
	}
	Goto readSonarData 
}

QActor datacleaner context ctxashstorage {
	[# var D = 0; #]
	State s0 initial {
		printCurrentMessage color magenta
		delay 100
		subscribeTo sonardevice for sonardata		
		println("$name subscribed to sonardevice") color yellow
	}
	Transition t0 whenEvent sonardata -> filter
	
	State filter {
		 println("$name D=$D") color green	
		onMsg(sonardata : distance(D)) {
	      	[#  D = payloadArg(0).toInt() #]	      	
	      	println("$name D=$D") color green	
	      	if [# D < 12 #] {
	      		println("$name ash full ") color yellow	
	 			updateResource  [# "info($name,ashLevel,full)" #] 
	     	}
	     	if [# D > 90#] {
	      		println("$name ash empty ") color yellow	
	 			updateResource  [# "info($name,ashLevel,empty)" #] 
	     	}
	     	if [# D > 90 && D < 12 #] {
	      		println("$name ash half") color yellow	
	 			updateResource  [# "info($name,ashLevel,half)" #] 
	     	}
     	}
	}	
	Transition t0 whenEvent sonardata -> filter
}


/*Mock actor*/
//QActor incinerator context ctxashstorage{
//	State s0 initial{
//		delay 1000
//		println("($name): Inizio inceneritore") color magenta
//		[# var start ="on"; #]
//		updateResource [# "info($name,start,$start)" #]    
//		delay 5000		
//		println("($name): Fine inceneritore") color magenta
//		[# start ="off"; #]
//		updateResource [# "info($name,start,$start)" #]     	
//		 	
//	}
//}










