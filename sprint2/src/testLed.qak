System sprintdue

Dispatch info : info(X, Y, Z)

Event startIncinerator: startIncinerator(X)

Request testStart : testStart(X)
Request testRequest : testRequest(X)
Reply testReply : testReply(X ,Y)
Event sonardata : distance(D)   // Valori grezzi letti dal sonar 
//
//
//Context ctxservicearea ip [host="127.0.0.1" port=6969]
//Context ctxbasicrobot ip [host="127.0.0.1"  port=8020]
Context ctxashstorage ip [host="localhost"  port=8021]								

//ExternalQActor wis context ctxservicearea
//ExternalQActor oprobot context ctxservicearea
//ExternalQActor incinerator context ctxservicearea

QActor monitoring_device context ctxashstorage withobj led using "LedFactory.create(\"localhost\",\"8021\")"{
	import "main.resources.LedFactory"
	[#var statusInc = "off"
	  var statusAsh = "empty"#]
	// Scrivere POJO LED FISICO (con supporto a Raspberry)
	State s0 initial{
		printCurrentMessage color yellow
		delay 150
		observeResource incinerator msgid info    
		observeResource datacleaner msgid info    
	}
		Transition t0
		whenMsg info -> update
		
	State update{
		printCurrentMessage color red
		onMsg(info : info(X,Y,Z)){
			[# val N = payloadArg(0)  #]
			[# val VAR = payloadArg(1)#]
		    [# val VAL = payloadArg(2)#]
		    
		    [#
		    	if(N.equals("incinerator")){
		    		if(VAR.equals("start")&&VAL.equals("on")){
		    			led.turnOn();
		    			statusInc = "on"
		    		}
		    		
		    		if(VAR.equals("start")&&VAL.equals("off")){
		    			led.turnOff();
		    			statusInc = "off"
		    		}
		    	}else if(N.equals("datacleaner")){
		    		if(VAR.equals("ashLevel")&&VAL.equals("full")){
						statusAsh = "full"
						led.turnBlink();
					}
					if(VAR.equals("ashLevel")&&VAL.equals("empty")){
						statusAsh = "empty"	
						led.turnBlink();
					}
					if(VAR.equals("ashLevel")&&VAL.equals("half")){
						statusAsh= "half";
					}
		    	}
		    #]
		}
	}		
		Transition t1
		whenMsg info -> update
}

QActor sonardevice context ctxashstorage{
	[# 
	lateinit var reader : java.io.BufferedReader
    lateinit var p : Process	
    var Distance = 0
	#]	
	State s0 initial{
		println("$name | sonarstart") 
	 	[#
//			p       = Runtime.getRuntime().exec("python src/main/resources/sonar.py")
			p       = Runtime.getRuntime().exec("python3 src/main/resources/sonar.py")
			reader  = java.io.BufferedReader(  java.io.InputStreamReader(p.getInputStream() ))	

		#]		
	}
	Goto readSonarData
	
	State readSonarData{
	[# 
		var data = reader.readLine()
		if( data != null ){
			try{ 
				val vd = data.toFloat()
				val v  = vd.toInt()
				if( v <= 100 ){	// Controlla questo valore
					Distance = v				
				}else Distance = 0
			}catch(e: Exception){
					CommUtils.outred("$name readSonarDataERROR: $e "   )
			}
		}	
	#]	
		if [# Distance > 0 #] { 
		    println("$name with python: data = $data"   ) color red
			emitlocalstream sonardata : distance($Distance)			 
		}
		//autodispatch doread : doread(1)
	}
	Goto readSonarData 
}

QActor datacleaner context ctxashstorage {
	[# var D = 0; #]
	State s0 initial {
		delay 100
		subscribeTo sonardevice for sonardata		
		println("$name subscribed to sonardevice") color blue
	}
	Transition t0 whenEvent sonardata -> filter
	
	State filter {
		 println("$name D=$D") color black	
		onMsg(sonardata : distance(D)) {
	      	[#  D = payloadArg(0).toInt() #]	      	
	      	println("$name D=$D") color black	
	      	if [# D < 12 #] {
	      		println("$name ash full ") color magenta	
	 			updateResource  [# "info($name,ashLevel,full)" #] 
	     	}
	     	if [# D > 90#] {
	      		println("$name ash empty ") color magenta	
	 			updateResource  [# "info($name,ashLevel,empty)" #] 
	     	}
	     	if [# D > 90 && D < 12 #] {
	      		println("$name ash half") color magenta	
	 			updateResource  [# "info($name,ashLevel,half)" #] 
	     	}
     	}
	}	
	Transition t0 whenEvent sonardata -> filter
}


/*Mock actor*/
QActor incinerator context ctxashstorage{
	State s0 initial{
//		delay 1000
//		println("($name): Inizio inceneritore") color magenta
//		[# var start ="on"; #]
//		updateResource [# "info($name,start,$start)" #]    
//		delay 5000		
//		println("($name): Fine inceneritore") color magenta
//		[# start ="off"; #]
//		updateResource [# "info($name,start,$start)" #]     			 	
	}
}

QActor test_observer context ctxashstorage{
	[# 	
		var LED_ON = false 
		var LED_OFF = false
		var LED_BLINK = false
	#]
	
	State s0 initial{
		printCurrentMessage color yellow
		delay 500
	}
	Transition t0
		whenMsg info -> monitor
		whenRequest testRequest -> handleTest
		
	State monitor{
		printCurrentMessage color red
		onMsg(info : info(X,Y,Z)){
			[# val N 	= payloadArg(0)#]
			[# val VAR 	= payloadArg(1)#]
		    [# val VAL 	= payloadArg(2)#]
		    [# LED_ON = false #]
		    [# LED_OFF = false#]
		    [# LED_BLINK = false#]
		    		    
		    if [# N.equals("LED") && VAR.equals("led") && VAL.equals("on")#]{
		    	[# LED_ON = true #]
		    }
		    if [# N.equals("LED") && VAR.equals("led") && VAL.equals("off")#]{
		    	[# LED_OFF = true #]	
		    }
		    if [# N.equals("LED") && VAR.equals("led") && VAL.equals("blink")#]{
				[# LED_BLINK = true#]
		    }
		}
	}
	Transition t1
		whenMsg info -> monitor
		
	State handleTest {
		println("Richiesta Ricevuta") color green
		[# var Res = "$LED_ON, $LED_OFF, $LED_BLINK"#]
  		replyTo testRequest with testReply : testReply($Res) 
	}
	Transition t2
		whenMsg info -> monitor
}








