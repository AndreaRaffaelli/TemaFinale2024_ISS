/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Sonar ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var As_status = 0
				val DLIMIT = 3
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_s0", 
				 	 					  scope, context!!, "local_tout_"+name+"_s0", 3000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t09",targetState="emptyStorage",cond=whenTimeout("local_tout_"+name+"_s0"))   
					transition(edgeName="t010",targetState="ashUpdate",cond=whenDispatch("addAsh"))
				}	 
				state("ashUpdate") { //this:State
					action { //it:State
						 
									As_status =  As_status +1
									if(As_status>DLIMIT){
						forward("ledBlink", "ledBlink(lampeggia)" ,"monitoringdevice" ) 
						
									} else {
						forward("ledOff", "ledOff(stop)" ,"monitoringdevice" ) 
						
									}
						forward("sonarUpdate", "sonarUpdate($As_status)" ,"wis" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_ashUpdate", 
				 	 					  scope, context!!, "local_tout_"+name+"_ashUpdate", 3000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t011",targetState="emptyStorage",cond=whenTimeout("local_tout_"+name+"_ashUpdate"))   
					transition(edgeName="t012",targetState="ashUpdate",cond=whenDispatch("addAsh"))
				}	 
				state("emptyStorage") { //this:State
					action { //it:State
						CommUtils.outcyan("($name): Svuotato contenitore ceneri")
						 
									As_status = 0
						forward("ledBlink", "ledBlink(lampeggia)" ,"monitoringdevice" ) 
						forward("sonarUpdate", "sonarUpdate($As_status)" ,"wis" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_emptyStorage", 
				 	 					  scope, context!!, "local_tout_"+name+"_emptyStorage", 3000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t013",targetState="emptyStorage",cond=whenTimeout("local_tout_"+name+"_emptyStorage"))   
					transition(edgeName="t014",targetState="ashUpdate",cond=whenDispatch("addAsh"))
				}	 
			}
		}
} 
