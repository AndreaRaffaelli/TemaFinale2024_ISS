/* Generated by AN DISI Unibo */ 
package it.unibo.wastestorage

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wastestorage ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
					var W = 0;
					
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_s0", 
				 	 					  scope, context!!, "local_tout_"+name+"_s0", 4000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t015",targetState="loadScale",cond=whenTimeout("local_tout_"+name+"_s0"))   
					transition(edgeName="t016",targetState="unloadScale",cond=whenDispatch("decScale"))
				}	 
				state("loadScale") { //this:State
					action { //it:State
						
									W = W +1;
									
						forward("scaleUpdate", "scaleUpdate($W)" ,"wis" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_loadScale", 
				 	 					  scope, context!!, "local_tout_"+name+"_loadScale", 4000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t017",targetState="loadScale",cond=whenTimeout("local_tout_"+name+"_loadScale"))   
					transition(edgeName="t018",targetState="unloadScale",cond=whenDispatch("decScale"))
				}	 
				state("unloadScale") { //this:State
					action { //it:State
						
									W = W -1;
									
						forward("scaleUpdate", "scaleUpdate($W)" ,"wis" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_unloadScale", 
				 	 					  scope, context!!, "local_tout_"+name+"_unloadScale", 4000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t019",targetState="loadScale",cond=whenTimeout("local_tout_"+name+"_unloadScale"))   
					transition(edgeName="t020",targetState="unloadScale",cond=whenDispatch("decScale"))
				}	 
			}
		}
} 
