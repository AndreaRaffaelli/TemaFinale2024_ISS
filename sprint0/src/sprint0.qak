System sprint0

//Context ctxRobot  ip [host="localhost" port=8001] 
//Context ctxServiceArea  ip [host="localhost" port=8001] 
//Context ctxWasteStorage  ip [host="localhost" port=8001] 
//Context ctxAshStorage   ip [host="localhost" port=8001] 



Dispatch sonarUpdate: sonarUpdate(X)
Dispatch scaleUpdate: scaleUpdate(X)

Dispatch robotStart: robotStart(X)

Dispatch burnStart: burnStart(X)
Event burnEnd: burnEnd(X)


Dispatch ledOn: ledOn(X)
Dispatch ledOff: ledOff(X)
Dispatch ledBlink: ledBlink(X)

Dispatch decScale: decScale(X)
Dispatch depositRP: depositRP(X)

Dispatch addAsh: addAsh(X)




Context ctxLocale   ip [host="localhost" port=8001] 



QActor wis context ctxLocale{ 
	[#
		var ws_status = 0;
		var as_status = 0;
		var inc_status= false;
		var robotWait = true;
	#]
	
	
	State s0 initial{
		observeResource sonar msgid sonarUpdate
		observeResource wastestorage msgid scaleUpdate
		
	}
	Goto idle
	
	State idle {}
	Transition t0
		whenMsg sonarUpdate -> sonarHandler
		whenMsg scaleUpdate -> scaleHandler
		whenMsg depositRP -> startInc
		whenEvent burnEnd -> stopInc
		
	State startInc{
		forward incinerator -m burnStart : burnStart( parti )
		[# inc_status=true #]
		forward monitoringdevice -m ledOn : ledOn( parti )
		
	}
	
	State stopInc{
		[# inc_status=false #]
		forward monitoringdevice -m ledOff : ledOff( stop )
		
	}
		
	State sonarHandler {
		onMsg( sonarUpdate:sonarUpdate(X)){
			[# as_status = payloadArg(0).toInt() #]
			println("($name) sonarhandler: $as_status") color blue	
		}	
	}
	Goto controllo
	
	State scaleHandler {
		onMsg( scaleUpdate:scaleUpdate(X)){
			[# ws_status = payloadArg(0).toInt() #]
			println("($name) scalehandler: $ws_status") color blue	
		}	
	}
	Goto controllo
	
	
	State controllo {
		[#
			if(ws_status>0 && ws_status>0 && inc_status === false && robotWait === true){
				#]
				forward oprobot -m robotStart : robotStart( parti )
				println("($name) controllo: condizioni corrette")
				[#
				robotWait=false;
			}
			#
		]
	}
	Goto idle
}




// In oprobot Ã¨ da implementare gestione posizione del robot x gui
QActor oprobot context ctxLocale{ 
	State home initial{}
	Transition t0
		whenMsg robotStart -> start
		whenEvent burnEnd -> gatheringAsh		// inc segnala fine combustione
		
	State start{
		delay 2000			// Si sposta alla porta di wast storage			
		forward wastestorage -m decScale : decScale( decrementa_bilancia ) 	// Svuotiamo il waste storage
		delay 3000 // Va all'inc
		forward wis -m depositRP : depositRP( scaricoRP ) 	// Svuotiamo il waste storage
		delay 2000 // va in home
	}
	Goto home
	
	State gatheringAsh{
		delay 4000 // andiamo porta raccolta ash e scarichiamo nella porta di ashout
		forward sonar -m addAsh : addAsh( incrementoAsh ) // simuliamo comportamento del sonar: aggiunta polvere
		delay 2000 // torna in home
	}
	Goto home
}


QActor incinerator context ctxLocale{ 
	[#
			val BTIME = 3000L;
	#]
	State s0 initial{}
	Transition t0
		whenMsg burnStart -> start
		
	State start{
		delay 3000
		emit burnEnd : burnEnd( stop )
	}
	Transition t0
		whenMsg burnStart -> start
}




QActor sonar context ctxLocale{ 	// Manca update resource
	[# 
		var as_status = 0
	#]
	State s0 initial{
		printCurrentMessage
	}
	Transition t0
		whenTime 3000 -> emptyStorage
		whenMsg addAsh -> ashUpdate
		
	State ashUpdate{
		[# 
			as_status =  as_status +1
			if(as_status>4){
				#]
				forward monitoringdevice -m ledBlink : ledBlink( lampeggia )
				[#
			} else {
				#]
				forward monitoringdevice -m ledOff : ledOff( stop )
				[#
			}
			#]
			updateResource [#  "sonarUpdate($as_status)" #]
	}
	Transition t0
		whenTime 3000 -> emptyStorage
		whenMsg addAsh -> ashUpdate
		
	State emptyStorage{
		[# 
			as_status = 0
		#]
		
		forward monitoringdevice -m ledBlink : ledBlink( lampeggia )
		updateResource [#  "sonarUpdate($as_status)" #]
	}
	Transition t0
		whenTime 3000 -> emptyStorage
		whenMsg addAsh -> ashUpdate
}





QActor wastestorage context ctxLocale{ 
	[#
			var w = 0;
			
		#]
	State s0 initial{
		printCurrentMessage
	}
	Transition t0
		whenTime 4000 -> loadScale
		whenMsg decScale -> unloadScale

	
	State loadScale{
		[#
			w = w +1;
			
		#]
		updateResource [#  "scaleUpdate($w)" #]
	}
	Transition t0
		whenTime 4000 -> loadScale
		whenMsg decScale -> unloadScale
	
	State unloadScale{
		[#
			w = w -1;
			
		#]
		updateResource [#  "scaleUpdate($w)" #]
	}
	Transition t0
		whenTime 4000 -> loadScale
		whenMsg decScale -> unloadScale
}




QActor monitoringdevice context ctxLocale{ 
	[#
			var led = 0;
			/* 
			 * led= 0 	spento
			 * led= 1 	acceso
			 * led= 2	blink
			 * */
		#]
	State s0 initial{}
	Transition t0
		whenMsg ledOn -> turnOnLed
		whenMsg ledOff -> turnOffLed
		whenMsg ledBlink -> turnBlinkLed
		
	State turnOnLed{
		[#
			led = 1;
		#]
		println ("($name)	Accensione Led") color green
	}
	Transition t0
		whenMsg ledOff -> turnOffLed
		whenMsg ledBlink -> turnBlinkLed
		
	State turnOffLed{
		[#
			led = 0;
		#]
		println ("($name)	Spegnimento Led") color red
	}
	Transition t0
		whenMsg ledOn -> turnOnLed
		whenMsg ledBlink -> turnBlinkLed
	
	State turnBlinkLed{
		[#
			led = 2;
		#]
		println ("($name)	Lampeggio Led") color yellow
	}
	Transition t0
		whenMsg ledOn -> turnOnLed
		whenMsg ledOff -> turnOffLed
	
}

